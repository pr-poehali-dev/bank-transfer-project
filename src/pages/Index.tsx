import { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import LoginForm from '@/components/LoginForm';
import DashboardHeader from '@/components/DashboardHeader';
import StatsCards from '@/components/StatsCards';
import CardsTab from '@/components/CardsTab';
import TransferTab from '@/components/TransferTab';
import HistoryTab from '@/components/HistoryTab';

interface BankCard {
  id: string;
  number: string;
  balance: number;
  type: 'virtual' | 'physical';
  color: string;
  owner: string;
}

interface Transaction {
  id: string;
  type: 'incoming' | 'outgoing';
  amount: number;
  recipient: string;
  date: string;
  status: 'completed' | 'pending';
}

const AUTH_API = 'https://functions.poehali.dev/920a2dcf-5083-486d-b287-86ac496b21f0';

export default function Index() {
  const { toast } = useToast();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [activeView, setActiveView] = useState<'login' | 'register' | 'dashboard'>('login');
  const [currentUser, setCurrentUser] = useState('');
  const [userId, setUserId] = useState<number | null>(null);
  
  const [cards, setCards] = useState<BankCard[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);

  const [transferAmount, setTransferAmount] = useState('');
  const [transferRecipient, setTransferRecipient] = useState('');
  const [selectedCard, setSelectedCard] = useState('1');

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const username = formData.get('email') as string;
    const password = formData.get('password') as string;
    
    try {
      const response = await fetch(AUTH_API, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'login', username, password })
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        setIsLoggedIn(true);
        setIsAdmin(data.user.is_admin);
        setCurrentUser(data.user.username);
        setUserId(data.user.id);
        setActiveView('dashboard');
        
        toast({
          title: data.user.is_admin ? "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë" : "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã",
          description: data.user.is_admin ? "–í—ã –≤–æ—à–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" : "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
          description: data.error || "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
        variant: "destructive",
      });
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const username = formData.get('username') as string;
    const email = formData.get('reg-email') as string;
    const password = formData.get('reg-password') as string;
    const full_name = formData.get('name') as string;
    
    try {
      const response = await fetch(AUTH_API, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'register', username, email, password, full_name })
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        setIsLoggedIn(true);
        setIsAdmin(data.user.is_admin);
        setCurrentUser(data.user.username);
        setUserId(data.user.id);
        setActiveView('dashboard');
        
        toast({
          title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
          description: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          description: data.error || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
        variant: "destructive",
      });
    }
  };

  const handleTransfer = () => {
    if (!transferAmount || !transferRecipient) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        variant: "destructive",
      });
      return;
    }

    const newTransaction: Transaction = {
      id: String(Date.now()),
      type: 'outgoing',
      amount: parseFloat(transferAmount),
      recipient: transferRecipient,
      date: new Date().toLocaleString('ru-RU'),
      status: 'completed'
    };

    setTransactions([newTransaction, ...transactions]);
    
    const updatedCards = cards.map(card => 
      card.id === selectedCard 
        ? { ...card, balance: card.balance - parseFloat(transferAmount) }
        : card
    );
    setCards(updatedCards);

    toast({
      title: "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! ‚úÖ",
      description: `${transferAmount} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é ${transferRecipient}`,
    });

    setTransferAmount('');
    setTransferRecipient('');
  };

  const handleIssueCard = () => {
    const colors = [
      'from-orange-500 to-red-500',
      'from-green-500 to-emerald-500',
      'from-indigo-500 to-purple-500',
      'from-yellow-500 to-orange-500'
    ];
    
    const newCard: BankCard = {
      id: String(Date.now()),
      number: `${Math.floor(1000 + Math.random() * 9000)} ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ${Math.floor(1000 + Math.random() * 9000)}`,
      balance: 0,
      type: 'virtual',
      color: colors[Math.floor(Math.random() * colors.length)],
      owner: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤'
    };

    setCards([...cards, newCard]);
    toast({
      title: "–ö–∞—Ä—Ç–∞ –≤—ã–ø—É—â–µ–Ω–∞! üí≥",
      description: "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
    });
  };

  if (!isLoggedIn) {
    return (
      <LoginForm
        activeView={activeView}
        onLogin={handleLogin}
        onRegister={handleRegister}
        onSwitchView={setActiveView}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      <DashboardHeader isAdmin={isAdmin} />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 animate-fade-in">
          <h2 className="text-3xl font-bold mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h2>
          <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ</p>
        </div>

        <StatsCards cards={cards} transactions={transactions} />

        <Tabs defaultValue="cards" className="space-y-6">
          <TabsList className="bg-white/80 backdrop-blur-xl p-1">
            <TabsTrigger value="cards" className="gap-2">
              <Icon name="CreditCard" size={16} />
              –ö–∞—Ä—Ç—ã
            </TabsTrigger>
            <TabsTrigger value="transfer" className="gap-2">
              <Icon name="Send" size={16} />
              –ü–µ—Ä–µ–≤–æ–¥—ã
            </TabsTrigger>
            <TabsTrigger value="history" className="gap-2">
              <Icon name="History" size={16} />
              –ò—Å—Ç–æ—Ä–∏—è
            </TabsTrigger>
          </TabsList>

          <TabsContent value="cards">
            <CardsTab cards={cards} onIssueCard={handleIssueCard} />
          </TabsContent>

          <TabsContent value="transfer">
            <TransferTab
              cards={cards}
              selectedCard={selectedCard}
              transferAmount={transferAmount}
              transferRecipient={transferRecipient}
              onCardChange={setSelectedCard}
              onAmountChange={setTransferAmount}
              onRecipientChange={setTransferRecipient}
              onTransfer={handleTransfer}
            />
          </TabsContent>

          <TabsContent value="history">
            <HistoryTab transactions={transactions} />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}